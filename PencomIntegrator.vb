Imports System.Globalization
Imports System.Data.SqlClient
Imports System.IO
Imports System.Xml.Serialization
Imports System.Drawing
Imports System.Drawing.Drawing2D
Imports System.Drawing.Imaging

Public Class PencomIntegrator
    Public Function ResizeImage(ByVal imag As Image, ByVal size As Size, Optional ByVal preserveAspectRatio As Boolean = True) As Image
        Try
            Dim newWidth As Integer
            Dim newHeight As Integer
            If preserveAspectRatio Then
                Dim originalWidth As Integer = imag.Width
                Dim originalHeight As Integer = imag.Height
                Dim percentWidth As Single = CSng(size.Width) / CSng(originalWidth)
                Dim percentHeight As Single = CSng(size.Height) / CSng(originalHeight)
                Dim percent As Single = IIf(percentHeight < percentWidth, percentHeight, percentWidth)
                newWidth = CInt(originalWidth * percent)
                newHeight = CInt(originalHeight * percent)
            Else
                newWidth = size.Width
                newHeight = size.Height
            End If

            Dim newImage As Image = New Bitmap(newWidth, newHeight)
            Using graphicsHandle As Graphics = Graphics.FromImage(newImage)
                graphicsHandle.InterpolationMode = InterpolationMode.HighQualityBicubic
                graphicsHandle.DrawImage(imag, 0, 0, newWidth, newHeight)
            End Using

            Return newImage

        Catch ex As Exception
            Return imag
        End Try
    End Function
    Public Function byteArrayToImage(ByVal byteArrayIn As Byte()) As System.Drawing.Image
        Using mStream As New MemoryStream(byteArrayIn)
            Return System.Drawing.Image.FromStream(mStream)
        End Using
    End Function
    Public Shared Function ImageToByte(ByVal img As Image) As Byte()
        Dim converter As ImageConverter = New ImageConverter()
       ' img.Save("c:\temp\test.jpg", ImageFormat.Jpeg)
        Return CType(converter.ConvertTo(img, GetType(Byte())), Byte())
    End Function

    Public Function GeneratePIN(ByVal uniqueno As String) As String
        Try
            Dim sqlstring As String = "select * from [Temporary Client] where No_ = '" & uniqueno & "' select * from [Temporary NOK] where TEMPORARY_ID ='" & uniqueno & "' select * from [Temporary Biometrics] where TEMPORARY_ID ='" & uniqueno & "'"
            Dim ds As New DataSet
            ds = returnEASYREGREC(sqlstring)
            Dim personaldet, nokdet, biodet As DataRow
            personaldet = ds.Tables(0).Rows(0)
            nokdet = ds.Tables(1).Rows(0)
            biodet = ds.Tables(2).Rows(0)
            Dim employerInfoqery As String = "select * from employer where code ='" & personaldet.Item("Employer No_") & "'"
            Dim dsempdet As New DataSet
            dsempdet = returnEASYREGREC(employerInfoqery)

            GeneratePIN = ""
            Dim ecrs As New ecrsService.registrationRequestContributorRegistrationRequestDetailContributor
            With ecrs
                .biometric = New ecrsService.registrationRequestContributorRegistrationRequestDetailContributorBiometric
                .employmentRecord = New ecrsService.registrationRequestContributorRegistrationRequestDetailContributorEmploymentRecord
                .nextOfKinDetail = New ecrsService.registrationRequestContributorRegistrationRequestDetailContributorNextOfKinDetail
                .personalData = New ecrsService.registrationRequestContributorRegistrationRequestDetailContributorPersonalData
                '.biometric.consentForm = UnicodeStringToBytes("")
                If IsDBNull(biodet.Item("NIN_CONSENT")) Then
                    Return "Error: Invalid consent form"
                Else
                    .biometric.consentForm = biodet.Item("NIN_CONSENT")

                End If
                .biometric.picture = biodet.Item("picture")
                .biometric.signature = biodet.Item("signature")

                Dim size As New Size
                size.Width = 150
                size.Height = 150

                If .biometric.picture.Length > 25000 Then
                    .biometric.picture = ImageToByte(ResizeImage(byteArrayToImage(.biometric.picture), size, False))
                End If
                If .biometric.signature.Length > 25000 Then
                    .biometric.signature = ImageToByte(ResizeImage(byteArrayToImage(.biometric.signature), size, False))
                End If




                With .employmentRecord
                    .buildingNameOrNumber = ""
                    .countryCode = "NG"
                    .nigeriaOrAbroad = If(.countryCode = "NG", "N", "A")

                    .dateOfCurrentEmployment = personaldet.Item("Date of Confirmation")
                    .dateOfFirstAppointment = personaldet.Item("Date of first Employment")
                    .dateOfCurrentEmploymentSpecified = True
                    .dateOfFirstAppointmentSpecified = True


                    .employerCode = personaldet.Item("Employer No_")
                    .localGovernmentCode = personaldet.Item("Local Government Authority")

                    .phoneNumber = personaldet.Item("Phone No_").ToString
                    .poBox = ""
                    .sectorClass = personaldet.Item("Sector").ToString
                    If dsempdet.Tables.Count > 0 Then
                        If dsempdet.Tables(0).Rows.Count > 0 Then
                            .sectorClass = dsempdet.Tables(0).Rows(0).Item("sector").ToString
                            .natureOfBusiness = dsempdet.Tables(0).Rows(0).Item("IndustryDescription").ToString
                            Try

                                If dsempdet.Tables(0).Rows(0).Item("NewPencomCode").ToString.Trim <> "" Then
                                    .employerCode = dsempdet.Tables(0).Rows(0).Item("NewPencomCode").ToString
                                End If

                            Catch ex As Exception

                            End Try
                        End If
                    End If
                    .stateCode = personaldet.Item("Employer State Code").ToString
                    .streetName = personaldet.Item("Employer Address1").ToString
                    .townCity = personaldet.Item("Employer City").ToString
                    .zipCode = ""


                    ' to remove for live after correcting neccessary lga for employment
                    .stateCode = personaldet.Item("Employer State Code").ToString
                    .localGovernmentCode = personaldet.Item("Office_LGA").ToString
                    ' end removal


                    If .countryCode.ToString.ToUpper <> "NG" Then
                        .stateCode = ""
                        .localGovernmentCode = ""
                    End If
                End With
                With .nextOfKinDetail
                    .email = nokdet.Item("Email").ToString
                    .firstName = nokdet.Item("First Name").ToString
                    If nokdet.Item("GENDER").ToString.ToUpper.Trim = "M" Then .gender = "M"
                    If nokdet.Item("GENDER").ToString.ToUpper.Trim = "F" Then .gender = "F"
                    If .gender Is Nothing Then .gender = If(nokdet.Item("GENDER").ToString = "1", "M", "F")

                    If nokdet.Item("Middle Name").ToString.Trim <> "" Then .middleName = nokdet.Item("Middle Name").ToString
                    .phoneNumber = nokdet.Item("Mobile Phone").ToString
                    .poBox = nokdet.Item("NOK_POBOX").ToString
                    .relationship = getRelName(nokdet.Item("Relationship").ToString)

                    .residenceCountryCode = nokdet.Item("Country").ToString
                    If .residenceCountryCode = "" Then .residenceCountryCode = "NG"
                    If .residenceCountryCode = "566" Then .residenceCountryCode = "NG"
                    .nigeriaOrAbroad = If(.residenceCountryCode = "NG", "N", "A")
                    .residenceHouseNumber = nokdet.Item("NOK_ADDRESS_NO").ToString
                    .residenceLocalGovernmentCode = nokdet.Item("LGA").ToString
                    .residenceStateCode = nokdet.Item("STATE Code").ToString
                    .residenceStreetName = nokdet.Item("Address").ToString
                    .residenceTownCity = nokdet.Item("CITY").ToString
                    .surname = nokdet.Item("SURNAME").ToString
                    .title = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(nokdet.Item("Title").ToString)
                    .title = StrConv(.title, VbStrConv.ProperCase)
                    .zipCode = nokdet.Item("NOK_ZIPCODE").ToString


                    ' to remove for live after correcting neccessary lga for nok
                    .residenceStateCode = nokdet.Item("State Code").ToString
                    .residenceLocalGovernmentCode = nokdet.Item("LGA").ToString
                    ' end removal
                    If .residenceCountryCode.ToString.ToUpper <> "NG" Then
                        .residenceStateCode = ""
                        .residenceLocalGovernmentCode = ""
                    End If
                End With
                With .personalData
                    '.bvn = "00000000000"
                    .dateOfBirth = CDate(personaldet.Item("Date of Birth")).ToString("yyyy-MM-dd")

                    .email = personaldet.Item("E-Mail").ToString
                    .firstName = personaldet.Item("first name").ToString
                    .gender = If(personaldet.Item("GENDER").ToString = "1", "M", "F")
                    .localGovernmentOfOriginCode = personaldet.Item("Local Government Authority").ToString
                    .maritalStatus = getmaritalstatuscode(personaldet.Item("marital status"))
                    .middleName = personaldet.Item("middle names").ToString
                    .nationality = personaldet.Item("nationality").ToString
                    If .nationality = "" Then .nationality = "NG"
                    If .nationality = "566" Then .nationality = "NG"
                    .phoneNumber = personaldet.Item("Mobile 1").ToString
                    .poBox = ""
                    .registrationType = "N" 'N is New registration while R is regularization
                    .residenceCountryCode = personaldet.Item("Country_Region Code").ToString
                    If .residenceCountryCode = "" Then .residenceCountryCode = "NG"
                    If .residenceCountryCode = "566" Then .residenceCountryCode = "NG"
                    .nigeriaOrAbroad = If(.residenceCountryCode = "NG", "N", "A")


                    .residenceStateCode = personaldet.Item("State").ToString
                    .residenceStreetName = personaldet.Item("Address").ToString
                    .residenceTownCity = personaldet.Item("city").ToString

                    .residenceZipCode = ""
                    .stateOfOriginCode = personaldet.Item("State of Origin").ToString
                    .surname = personaldet.Item("Surname").ToString
                    .temporaryPin = ""
                    .title = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(personaldet.Item("Title").ToString)
                    .title = StrConv(.title, VbStrConv.ProperCase)

                    ' to remove for live after correcting neccessary lga for nok
                    .residenceStateCode = personaldet.Item("State").ToString
                    .residenceLocalGovernmentCode = personaldet.Item("LGA").ToString
                    ' end removal
                    .bvn = personaldet.Item("BVN").ToString
                    .nin = personaldet.Item("NIN").ToString
                    .placeOfBirth = personaldet.Item("place of birth").ToString
                    .maidenOrFormerName = personaldet.Item("Maiden_Former_Name").ToString
                    .residenceHouseNameOrNumber = personaldet.Item("RESIDENTIAL_ADDRESS_NO").ToString
                    If .residenceCountryCode <> "NG" Then
                        .residenceStateCode = ""
                        .residenceLocalGovernmentCode = ""
                    End If
                End With

                .formNumber = uniqueno


                If Not IsDBNull(personaldet.Item("OFFICE_ADDRESS_NO")) Then .employmentRecord.buildingNameOrNumber = personaldet.Item("OFFICE_ADDRESS_NO").ToString
                If Not IsDBNull(personaldet.Item("Office_Country")) Then .employmentRecord.countryCode = personaldet.Item("Office_Country").ToString
                .employmentRecord.countryCode = "NG"
                If .employmentRecord.countryCode = "566" Then .employmentRecord.countryCode = "NG"

                If Not IsDBNull(personaldet.Item("OFFICE_NIGERIA_ABROAD")) Then .employmentRecord.nigeriaOrAbroad = personaldet.Item("OFFICE_NIGERIA_ABROAD").ToString
                .employmentRecord.nigeriaOrAbroad = If(.employmentRecord.countryCode = "NG", "N", "A")





                Dim regDetails As New ecrsService.registrationRequestContributorRegistrationRequestDetail
                Dim allecrs(0) As ecrsService.registrationRequestContributorRegistrationRequestDetailContributor
                allecrs(0) = ecrs
                regDetails.header = New ecrsService.pfaRequestHeader

                regDetails.header.pfaCode = "033"
                regDetails.header.requestCode = "ECRSCR01"
                regDetails.body = allecrs

                Dim submit As New ecrsService.RequestSubmissionWS()




RESEND:         Dim response = submit.registrationRequest("AIICO", "b7fceaf44b81530bbea6699e6d53e99d9fad5d80372db8474e149dc6f952f9b9", regDetails)


                Dim Objresp = Split(response, "<")
                Dim setid, responsecode, responsemessage As String

                setid = Split(Objresp(1), ">")(1)
                responsecode = Split(Objresp(3), ">")(1)
                responsemessage = Split(Objresp(5), ">")(1)
                If setid = "null" Or setid = "" Then
                    'Dim errortabledata As DataSet = stam(response)
                    If response.Length > 100 Then
                        response = ("Error: " & Mid(response, 100))
                    Else response = ("Error: " & response)
                    End If
                    Return ("Error: " & Mid(response, 100))
                End If
                If setid.Contains("ECRSCR01-033") = False Then
                    GoTo RESEND
                End If
                Dim statusResponse As String = getPencomRequestStatus(setid, uniqueno, "registration")
                'Dim responsetabledata As DataSet = stam(statusResponse)
                'Dim boolo As String = insertUpdateResponse(setid, uniqueno, "Registration", responsetabledata)
                Return setid
            End With
        Catch ex As Exception
            Return "Error: " & ex.Message
        End Try
    End Function
    Private Sub writethefile(ByVal filecont As String, ByVal usercode As String)
        Dim file As System.IO.StreamWriter
        file = My.Computer.FileSystem.OpenTextFileWriter("c:\Sendingfiles\" & usercode & ".txt", True)
        file.WriteLine(filecont)
        file.Close()
    End Sub
    Public Function PencomRecapture(ByVal pin As String) As String
        Try
            Dim sqlstring As String = "select * from [ENROLLEE] WHere RSA_CODE = '" & pin & "'"
            Dim ds As New DataSet
            ds = returnEASYREGREC(sqlstring)

            Dim personaldet As DataRow
            personaldet = ds.Tables(0).Rows(0)

            Dim dsimgs As DataSet
            Dim imgdet As DataRow
            Dim FUNDVAL As String
            dsimgs = returnEASYREGREC(" select * from [ENROLLEE_images] WHere CODE = '" & personaldet.Item("CODE").ToString & "' select [Fund ID] from [AIICO FUND ACCOUNTS$Vendor] where P_I_N  = '" & pin & "'")
            If dsimgs.Tables(1).Rows(0).Item(0) = "4" Then
                FUNDVAL = "R"
            Else
                FUNDVAL = "A"
            End If
            If dsimgs.Tables(0).Rows.Count > 0 Then
                imgdet = dsimgs.Tables(0).Rows(0)
            Else
                Return "Error: Images not captured for this client"
            End If

            Dim employerInfoqery As String = "select * from employer where code ='" & personaldet.Item("Employer_code") & "'"
            Dim dsempdet As New DataSet
            dsempdet = returnEASYREGREC(employerInfoqery)

            PencomRecapture = ""
            Dim ecrs As New ecrsService.recaptureRequestRecaptureRequestDetailContributor
            With ecrs
                .biometric = New ecrsService.recaptureRequestRecaptureRequestDetailContributorBiometric
                .employmentRecord = New ecrsService.recaptureRequestRecaptureRequestDetailContributorEmploymentRecord
                .nextOfKinDetail = New ecrsService.recaptureRequestRecaptureRequestDetailContributorNextOfKinDetail
                .personalData = New ecrsService.recaptureRequestRecaptureRequestDetailContributorPersonalData
                ' .biometric.consentForm = UnicodeStringToBytes("")

                If Not IsDBNull(imgdet.Item("PICTURE")) Then
                    .biometric.picture = imgdet.Item("PICTURE")
                Else
                    Return "Error: Passport missing for this client"
                End If
                If Not IsDBNull(imgdet.Item("signature")) Then
                    .biometric.signature = imgdet.Item("signature")
                Else
                    Return "Error: Signature missing for this client"
                End If

                If Not IsDBNull(imgdet.Item("NIN_CONSENT")) Then
                    .biometric.consentForm = imgdet.Item("NIN_CONSENT")
                Else
                    Return "Error: NIN Consent missing for this client"
                End If


                Dim size As New Size
                size.Width = 150
                size.Height = 150

                If .biometric.picture.Length > 25000 Then
                    .biometric.picture = ImageToByte(ResizeImage(byteArrayToImage(.biometric.picture), size, False))
                End If
                If .biometric.signature.Length > 25000 Then
                    .biometric.signature = ImageToByte(ResizeImage(byteArrayToImage(.biometric.signature), size, False))
                End If
                If .biometric.consentForm.Length > 25000 Then
                    .biometric.consentForm = ImageToByte(ResizeImage(byteArrayToImage(.biometric.consentForm), size, False))
                End If


                '.biometric.consentForm = UnicodeStringToBytes(personaldet.Item("LETTER_EMPLOYMENT_PRIVATE"))
                '.biometric.picture = UnicodeStringToBytes(personaldet.Item("picture"))
                '.biometric.signature = UnicodeStringToBytes(personaldet.Item("signature"))
                With .employmentRecord
                    .buildingNameOrNumber = personaldet.Item("OFFICE_ADDRESS_NO")
                    .countryCode = "NG"
                    .dateOfCurrentEmployment = CDate(personaldet.Item("CONFIRMATION_DATE"))
                    .dateOfFirstAppointment = CDate(personaldet.Item("DATE_FIRST_EMPLOYED"))
                    .dateOfCurrentEmploymentSpecified = True
                    .dateOfFirstAppointmentSpecified = True
                    .employerCode = personaldet.Item("Employer_Code")
                    .localGovernmentCode = personaldet.Item("Office_LGA_Code")
                    .phoneNumber = personaldet.Item("Office_PHONE").ToString.Trim
                    If .phoneNumber = "" Then .phoneNumber = personaldet.Item("mobile_no").ToString.Trim
                    .poBox = ""
                    .sectorClass = personaldet.Item("Sector_Class").ToString
                    If dsempdet.Tables.Count > 0 Then
                        If dsempdet.Tables(0).Rows.Count > 0 Then
                            .sectorClass = dsempdet.Tables(0).Rows(0).Item("sector").ToString
                            .natureOfBusiness = dsempdet.Tables(0).Rows(0).Item("IndustryDescription").ToString
                            Try
                                If dsempdet.Tables(0).Rows(0).Item("NewPencomCode").ToString.Trim <> "" Then
                                    .employerCode = dsempdet.Tables(0).Rows(0).Item("NewPencomCode").ToString
                                End If

                            Catch ex As Exception

                            End Try
                        End If
                    End If
                    .stateCode = personaldet.Item("Office_STATE").ToString
                    .streetName = personaldet.Item("OFFICE_ADDRESS").ToString
                    .townCity = personaldet.Item("Office_town").ToString
                    .zipCode = personaldet.Item("Office_Zip_Code").ToString
                    .countryCode = personaldet.Item("Office_Country").ToString
                    If .countryCode = "566" Then .countryCode = "NG"
                    .nigeriaOrAbroad = If(.countryCode = "NG", "N", "A")

                    If .countryCode.ToString.ToUpper <> "NG" Then
                        .stateCode = ""
                        .localGovernmentCode = ""
                    End If
                End With
                With .nextOfKinDetail
                    .email = personaldet.Item("NOK_Email").ToString
                    .firstName = personaldet.Item("NOK_First_Name").ToString
                    .gender = personaldet.Item("NOK_GENDER").ToString
                    .middleName = personaldet.Item("NOK_Middle_Name").ToString
                    .phoneNumber = personaldet.Item("NOK_Phone").ToString
                    .poBox = personaldet.Item("NOK_POBOX").ToString
                    'call relationship table to equate PENDING
                    .relationship = personaldet.Item("NOK_Relationship").ToString
                    .relationship = getRelName(.relationship)
                    .residenceCountryCode = personaldet.Item("NOK_Country").ToString
                    If .residenceCountryCode = "" Then .residenceCountryCode = "NG"
                    If .residenceCountryCode = "566" Then .residenceCountryCode = "NG"
                    .nigeriaOrAbroad = If(.residenceCountryCode = "NG", "N", "A")
                    .residenceHouseNumber = personaldet.Item("NOK_ADDRESS_NO").ToString
                    .residenceLocalGovernmentCode = personaldet.Item("NOK_LGA").ToString
                    .residenceStateCode = personaldet.Item("NOK_STATE").ToString
                    .residenceStreetName = personaldet.Item("NOK_Address").ToString
                    .residenceTownCity = personaldet.Item("NOK_town").ToString
                    .surname = personaldet.Item("NOK_Last_name").ToString
                    .title = personaldet.Item("title").ToString
                    .title = StrConv(.title, VbStrConv.ProperCase)
                    .zipCode = personaldet.Item("NOK_ZIPCODE").ToString
                    If .residenceCountryCode <> "NG" Then
                        .residenceStateCode = ""
                        .residenceLocalGovernmentCode = ""
                    End If
                End With

                With .personalData
                    .rsaPin = pin
                    If FUNDVAL = "" Then FUNDVAL = "A"
                    .rsaStatus = FUNDVAL  'A FOR RSA AND R FOR RETIREE
                    .dateOfBirth = CDate(personaldet.Item("Date_of_Birth")).ToString("yyyy-MM-dd")
                    .email = personaldet.Item("EMail").ToString
                    .firstName = personaldet.Item("first_name").ToString
                    .gender = personaldet.Item("GENDER").ToString
                    .localGovernmentOfOriginCode = personaldet.Item("LGA_OF_ORIGIN").ToString
                    .maritalStatus = (personaldet.Item("MARITAL_STATUS"))
                    .middleName = personaldet.Item("middle_name").ToString
                    .nationality = personaldet.Item("COUNTRY_OF_ORIGIN").ToString
                    If .nationality = "" Then .nationality = "NG"
                    If .nationality = "566" Then .nationality = "NG"
                    .phoneNumber = personaldet.Item("mobile_no").ToString

                    .poBox = ""
                    ' .registrationType = "N" 'N is New registration while R is regularization
                    .residenceCountryCode = personaldet.Item("RESIDENTIAL_COUNTRY").ToString
                    If .residenceCountryCode = "" Then .residenceCountryCode = "NG"
                    If .residenceCountryCode = "566" Then .residenceCountryCode = "NG"
                    .nigeriaOrAbroad = If(.residenceCountryCode = "NG", "N", "A")


                    .residenceStateCode = personaldet.Item("RESIDENTIAL_AD_STATE").ToString
                    .residenceStreetName = personaldet.Item("RESIDENTIAL_ADDRESS").ToString
                    .residenceTownCity = personaldet.Item("RESIDENTIAL_AD_TOWN").ToString
                    .residenceLocalGovernmentCode = personaldet.Item("RESIDENTIAL_LGA").ToString

                    .residenceZipCode = personaldet.Item("ZipCode").ToString
                    .stateOfOriginCode = personaldet.Item("STATE_OF_ORIGIN").ToString
                    .surname = personaldet.Item("LAST_NAME").ToString
                    .title = personaldet.Item("tittle").ToString
                    .title = StrConv(.title, VbStrConv.ProperCase)
                    .bvn = personaldet.Item("BVN").ToString
                    .nin = personaldet.Item("NIMC").ToString
                    .placeOfBirth = personaldet.Item("Plae_Of_Birth").ToString
                    .maidenOrFormerName = personaldet.Item("Maiden_Former_Name").ToString
                    .residenceHouseNameOrNumber = personaldet.Item("RESIDENTIAL_ADDRESS_NO").ToString
                    If .nationality.ToString.ToUpper <> "NG" Then
                        .stateOfOriginCode = ""
                        .localGovernmentOfOriginCode = ""
                    End If
                    If .residenceCountryCode.ToString.ToUpper <> "NG" Then
                        .residenceStateCode = ""
                        .residenceLocalGovernmentCode = ""
                    End If
                End With
                '33CR00000001

                '.formNumber = "33CR" & Mid(uniqueno, Len(uniqueno) - 8)
                .formNumber = "33RR" & personaldet.Item("Recapture_Code").ToString.PadLeft(8, "0")
                .dateOfRecapture = personaldet.Item("SUBMITTED_DATE")


                Dim regDetails As New ecrsService.recaptureRequestRecaptureRequestDetail
                Dim allecrs(0) As ecrsService.recaptureRequestRecaptureRequestDetailContributor
                allecrs(0) = ecrs
                regDetails.header = New ecrsService.pfaRequestHeader

                regDetails.header.pfaCode = "033"
                regDetails.header.requestCode = "ECRSRR01"
                regDetails.body = allecrs

                Dim submit As New ecrsService.RequestSubmissionWS()
                Dim response = submit.recaptureRequest(My.MySettings.Default.UUU, My.MySettings.Default.PPP, regDetails)

                Dim Objresp = Split(response, "<")
                Dim setid, responsecode, responsemessage As String

                setid = Split(Objresp(1), ">")(1)
                If setid = "null" Then
                    Return "Error:" + Mid(response, 110)
                End If
                responsecode = Split(Objresp(3), ">")(1)
                responsemessage = Split(Objresp(5), ">")(1)
                If responsecode <> "0" Then
                    Return "Error:" + Mid(response, 110)
                End If
                Dim statusResponse As String = getPencomRequestStatus(setid, pin, "recapture")
                Return setid
            End With
            Return ""
        Catch ex As Exception
            Return "Error: " & ex.Message
        End Try
    End Function
    Public Function PencomUpdateBiometrics(ByVal pin As String, ByVal FN As String,
                                           ByVal SN As String, ByVal UpdateType As String, ByVal PIC As Byte(), ByVal Sign As Byte()) As String
        Try
            Dim ecrsStatus As New ecrsService.RequestSubmissionWS
            Dim biodetbody As New ecrsService.biometricUpdateRequestBiometricUpdateRequestDetail
            Dim biodet As New ecrsService.biometricUpdateRequestBiometricUpdateRequestDetailContributor
            Dim header As New ecrsService.pfaRequestHeader
            header.pfaCode = "033"
            header.requestCode = "ECRSMU01"
            biodet.rsaPin = pin
            biodet.surname = SN
            biodet.firstName = FN
            biodet.biometric.picture = PIC
            biodet.biometric.signature = Sign
            biodetbody.header = header

            biodet.biometric.updateType = Mid(UpdateType, 1, 1)
            Dim response As String = ecrsStatus.biometricUpdateRequest(My.MySettings.Default.UUU, My.MySettings.Default.PPP, biodetbody)

            Dim Objresp = Split(response, "<")
            Dim setid, responsecode, responsemessage As String

            setid = Split(Objresp(1), ">")(1)
            responsecode = Split(Objresp(3), ">")(1)
            responsemessage = Split(Objresp(5), ">")(1)
            Dim statusResponse As String = getPencomRequestStatus(setid, pin, "updatebiometrics")
            Dim responsetabledata As DataSet = stam(statusResponse)
            insertUpdateResponse(setid, pin, "BiometricsUpdate", responsetabledata)
            Return "Success"
        Catch ex As Exception
            Return "Error: " & ex.Message
        End Try
    End Function
    Public Function PencomUpdateBiodata(ByVal UpdateCode As String, ByVal pin As String, ByVal firstname As String, ByVal surname As String,
                                           ByVal fieldcode As String, ByVal oldvalue As String, ByVal newvalue As String) As String
        Try
            Dim ecrsStatus As New ecrsService.RequestSubmissionWS
            Dim biodatbody As New ecrsService.biodataUpdateRequestBiodataUpdateRequestDetail
            Dim biodat As New ecrsService.biodataUpdateRequestBiodataUpdateRequestDetailContributor
            Dim header As New ecrsService.pfaRequestHeader
            Dim bioupdate As New ecrsService.biodataUpdateRequestBiodataUpdateRequestDetailContributorField

            If fieldcode.EndsWith("|") Then fieldcode = Mid(fieldcode, 1, Len(fieldcode) - 1)
            If oldvalue.EndsWith("|") Then oldvalue = Mid(oldvalue, 1, Len(oldvalue) - 1)
            If newvalue.EndsWith("|") Then newvalue = Mid(newvalue, 1, Len(newvalue) - 1)

            Dim fieldcodeobj As Object = Split(fieldcode, "|")
            Dim oldvalobj As Object = Split(oldvalue, "|")
            Dim newvalobj As Object = Split(newvalue, "|")
            Dim bioupdatearray(UBound(fieldcodeobj)) As ecrsService.biodataUpdateRequestBiodataUpdateRequestDetailContributorField
            For i As Integer = 0 To UBound(fieldcodeobj)
                bioupdate = New ecrsService.biodataUpdateRequestBiodataUpdateRequestDetailContributorField
                bioupdate.fieldCode = fieldcodeobj(i).ToString.Trim
                bioupdate.oldValue = oldvalobj(i).ToString.Trim
                bioupdate.newValue = newvalobj(i).ToString.Trim
                bioupdatearray(i) = bioupdate
            Next


            header.pfaCode = "033"
            header.requestCode = "ECRSDU01"
            biodat.rsaPin = pin
            biodat.surname = surname
            biodat.firstName = firstname
            biodat.updates = bioupdatearray
            biodatbody.header = header

            Dim biodatarray(0) As ecrsService.biodataUpdateRequestBiodataUpdateRequestDetailContributor
            biodatarray(0) = biodat
            biodatbody.body = biodatarray

            Dim response As String = ecrsStatus.biodataUpdateRequest(My.MySettings.Default.UUU, My.MySettings.Default.PPP, biodatbody)

            Dim Objresp = Split(response, "<")
            Dim setid, responsecode, responsemessage As String

            setid = Split(Objresp(1), ">")(1)
            responsecode = Split(Objresp(3), ">")(1)
            responsemessage = Split(Objresp(5), ">")(1)
            Dim statusResponse As String = getPencomRequestStatus(setid, UpdateCode, "biodataupdate")
            ' Dim responsetabledata As DataSet = stam(statusResponse)
            '   insertUpdateResponse(setid, pin, "BiodataUpdate", responsetabledata)
            Return setid
        Catch ex As Exception
            Return "Error: " & ex.Message
        End Try
    End Function
    Public Function returnEASYREGREC(ByVal sqlquery As String) As DataSet
        Dim sqlConn As SqlConnection = New SqlConnection(My.MySettings.Default.EasyRegconnect)
        'Dim sqlConn As SqlConnection = New SqlConnection("Data Source=AIICOPENSERVAPP1\navdb;Initial Catalog=easyregServer;User ID=sa;Password=*aiico1")
        Dim ds As New DataSet
        sqlConn.Open()
        Dim cmd As SqlCommand = New SqlCommand(sqlquery, sqlConn)
        Dim da As New SqlDataAdapter(cmd)
        da.Fill(ds)
        sqlConn.Close()
        sqlConn.Dispose()

        Return ds
    End Function
    Private Function UnicodeStringToBytes(ByVal str As String) As Byte()
        Return System.Text.Encoding.Unicode.GetBytes(str)
    End Function
    Private Function getRelName(ByVal id As String) As String
        getRelName = id
        If IsNumeric(id) = False Then Return id
        Dim query As String = "SELECT * from [RELATIONSHIP] where RELATIONSHIP = '" & id & "'"
        Dim ds As DataSet = returnEASYREGREC(query)
        If ds.Tables(0).Rows.Count = 0 Then Return id
        Return ds.Tables(0).Rows(0).Item("Description").ToString
    End Function
    Public Function getPencomRequestStatus(ByVal setid As String, Optional ByVal uniqueno As String = "", Optional ByVal requesttype As String = "") As String
        Try
            Dim ecrsStatus As New ecrsService.RequestSubmissionWS
            Dim response As String = ecrsStatus.getRequestStatus(My.MySettings.Default.UUU, My.MySettings.Default.PPP, setid)
            Dim responsetabledata As DataSet = stam(response)
            insertUpdateResponse(setid, uniqueno, requesttype, responsetabledata)
            If responsetabledata.Tables.Count = 0 Then Return ("Error: Invalid")
            If responsetabledata.Tables.Count < 3 Then
                Return ("Error: " & responsetabledata.Tables(0).Rows(0).Item(1))
            Else
                Return responsetabledata.Tables(2).Rows(0).Item("PIN").ToString & "," & responsetabledata.Tables(2).Rows(0).Item("responsecode")
            End If
        Catch ex As Exception
            Return "Error: " & ex.Message
        End Try
    End Function
    Private Function stam(ByVal xmldata As String) As DataSet
        Dim theReader As StringReader = New StringReader(xmldata)
        Dim theDataSet As DataSet = New DataSet
        theDataSet.ReadXml(theReader)
        Return theDataSet
    End Function
    Private Function getmaritalstatuscode(ByVal intval As Integer) As String
        getmaritalstatuscode = ""
        Select Case intval
            Case "1"
                Return "SG"
            Case "2"
                Return "MD"
            Case "3"
                Return "DV"
            Case "4"
                Return "SP"
            Case "5"
                Return "WD"
            Case Else
                Return "INVALID"
        End Select
    End Function
    Private Function insertUpdateResponse(ByVal setid As String, ByVal uniqueid As String, ByVal RequestType As String, ByVal ds As DataSet) As String
        Dim query As String
        Try


            Dim dr As DataRow
            If ds.Tables.Count = 1 Then
                dr = ds.Tables(0).Rows(0)
                Return False
            Else
                dr = ds.Tables(2).Rows(0)

            End If
            If dr.Item("responsecode").ToString.Trim = "PD34U310SP04;" Then
                dr.Item("pin") = uniqueid
            End If
            dr.Item("responseMessage") = Replace(dr.Item("responseMessage"), "'", "")

            Dim dsres As New DataSet
            query = "select * from ecrs_response where setid ='" & setid & "'"
            dsres = returnEASYREGREC(query)
            If dsres.Tables(0).Rows.Count = 0 Then
                query = "INSERT INTO [dbo].[ECRS_Response]
           ([setId]
           ,[sn]
           ,[PIN]
            ,Temporary_ID
            ,RequestType
           ,[responseCode]
           ,[responseMessage]
           ,[DateTimeSent]
            ,DBUpdated)
         VALUES
           ('" & setid & "','" & dr.Item("sn").ToString & "','" & dr.Item("pin").ToString & "',
            '" & uniqueid & "',
           '" & RequestType & "','" & dr.Item("responsecode").ToString & "',
            '" & Mid(dr.Item("responseMessage").ToString, 1, 240) & "',getDate(),0)"
                dsres = returnEASYREGREC(query)
                If RequestType = "registration" Then
                    query = "update [Temporary Client] set setId ='" & setid & "' where No_ ='" & uniqueid & "'"
                    dsres = returnEASYREGREC(query)
                End If
                If RequestType = "recapture" Then
                    query = "update [enrollee] set LastsetId ='" & setid & "' where rsa_code ='" & uniqueid & "'"
                    dsres = returnEASYREGREC(query)
                End If
                Return True
            Else
                If dr.Item("responsecode").ToString.Trim = "PD34U310SP04;" Then
                    dr.Item("pin") = dsres.Tables(0).Rows(0).Item("Temporary_ID").ToString
                End If
                'Try
                '    If dr.Item("nin").ToString.Trim <> "" And dr.Item("responsemessage").ToString.Trim = "Accepted" Then
                '        dr.Item("pin") = dsres.Tables(0).Rows(0).Item("Temporary_ID").ToString
                '    End If
                'Catch ex As Exception

                'End Try

                query = "update ecrs_response set sn='" & dr.Item("sn") & "',pin='" & dr.Item("pin") & "',responsecode='" & dr.Item("responsecode") & "',
responsemessage='" & Mid(dr.Item("responsemessage"), 1, 240) & "',DateTimeUpdated=getDate()  where setId ='" & setid & "'"
                dsres = returnEASYREGREC(query)
                Return True
            End If
        Catch ex As Exception
            Return ex.Message

        End Try
    End Function

End Class